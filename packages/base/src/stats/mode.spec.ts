import * as random from '../random.js';
import * as modes from './mode.js';
import * as bootstrap from './bootstrap.js';
import { allPairs, mad, median, online } from '../stats.js';

describe('modalSearch', () => {
  test('creates a correctly sized window (2)', () => {
    const r = modes.modalSearch([1, 5, 6], 2, 0, 3);

    expect(r.range).toEqual([1, 2]);
    expect(r.ties).toEqual(0);
  });

  test('creates a correctly sized window (3)', () => {
    const r = modes.modalSearch([1, 5, 6], 3, 0, 3);

    expect(r.range).toEqual([0, 2]);
    expect(r.ties).toEqual(0);
  });

  test('counts ties', () => {
    const r = modes.modalSearch([1, 2, 3], 2, 0, 3);

    expect(r.range).toEqual([0, 1]);
    expect(r.ties).toEqual(1);
  });
});

describe('hsm', () => {
  test('finds one peak', () => {
    const gen = random.PRNGi32(34);
    const rng3 = random.gaussian(3, 0.25, gen);
    const rng6 = random.gaussian(6, 8, gen);
    const sample = new Float32Array(512);

    for (let i = 0; i < sample.length - 1; ) {
      sample[i++] = rng3();
      sample[i++] = rng6();
    }

    const r = modes.hsm(sample);
    expect(r.mode).toBeCloseTo(3, 1 / 4);
  });

  test('2 observations', () => {
    const r = modes.hsm([4, 5]);

    expect(r.mode).toBeCloseTo(4.5, 10);
    expect(r.bound).toEqual([0, 1]);
  });

  test('3 observations', () => {
    {
      const sample = [3, 10, 11];
      const r = modes.hsm(sample);

      expect(r.mode).toBeCloseTo(10.5, 10);
      expect(r.bound).toEqual([1, 2]);
    }
    {
      const sample = [3, 4, 11];
      const r = modes.hsm(sample);

      expect(r.mode).toBeCloseTo(3.5, 10);
      expect(r.bound).toEqual([0, 1]);
    }
  });

  test('4 observations', () => {
    {
      const sample = [1, 3, 10, 11];
      const r = modes.hsm(sample);

      expect(r.mode).toBeCloseTo(10.5, 10);
      expect(r.bound).toEqual([2, 3]);
    }
    {
      const sample = [1, 4, 5, 11];
      const r = modes.hsm(sample);

      expect(r.mode).toBeCloseTo(4.5, 10);
      expect(r.bound).toEqual([1, 2]);
    }
  });

  test('shallow peak', () => {
    const sample = [1, 3, 4, 5, 6, 7, 8, 10];
    const r = modes.hsm(sample);

    expect(r.mode).toBeCloseTo(5.5, 10);
  });

  describe('larger bounds', () => {
    test('bound length (3)', () => {
      const sample = [-10, 1, 2, 3, 10, 11];
      const r = modes.hsm(sample, 3);

      expect(r.bound).toEqual([1, 3]);
      expect(r.mode).toBeCloseTo((1 + 3) / 2, 10);
    });

    test('bound length (4)', () => {
      const sample = [0, 1, 1, 1, 1, 2];
      const r = modes.hsm(sample, 4);

      expect(r.bound).toEqual([1, 4]);
      expect(r.mode).toBeCloseTo(1, 10);
    });
  });

  test.only('Bad data', () => {
    const xs = [
      6648.125, 6692.349, 6705.766, 6715.609, 6728.534, 6738.195, 6759.185, 6763.008, 6767.951,
      6771.937, 6782.442, 6785.064, 6789.633, 6802.405, 6827.137, 6828.217, 6832.265, 6832.564,
      6842.836, 6846.652, 6864.942, 6893.609, 6902.888, 6911.142, 6913.066, 6922.317, 6941.202,
      6959.145, 6974.789, 7122.432, 7155.08, 7175.614, 7191.308, 7202.65, 7224.257, 7229.985,
      7238.641, 7277.716, 7283.994, 7286.23, 7292.097, 7294.944, 7297.424, 7299.937, 7313.862,
      7315.83, 7319.635, 7324.178, 7329.248, 7332.859, 7341.276, 7359.329, 7360.424, 7361.981,
      7370.113, 7384.626, 7399.257, 7402.902, 7449.092, 7456.954, 7539.558, 7561.531, 7859.031,
      7886.744, 7993.3, 7996.429, 8000.373, 8000.703, 8002.513, 8004.509, 8009.667, 8032.411,
      8035.538, 8038.807, 8039.888, 8043.1, 8052.184, 8062.592, 8064.432, 8066.286, 8079.818,
      8087.128, 8089.744, 8089.786, 8089.994, 8092.511, 8092.916, 8092.953, 8093.596, 8095.718,
      8100.898, 8101.976, 8102.326, 8102.96, 8102.967, 8103.447, 8103.741, 8104.685, 8105.712,
      8105.939, 8107.932, 8108.558, 8110.185, 8111.208, 8111.244, 8111.794, 8112.808, 8112.888,
      8113.483, 8114.344, 8114.488, 8115.098, 8115.707, 8116.822, 8118.292, 8119.262, 8120.087,
      8120.088, 8120.18, 8120.687, 8120.717, 8122.551, 8123.642, 8124.62, 8124.78, 8125.898,
      8128.099, 8130.476, 8131.104, 8131.197, 8132.145, 8134.035, 8137.031, 8137.08, 8138.316,
      8138.646, 8139.169, 8144.299, 8144.32, 8145.199, 8145.4, 8147.185, 8147.662, 8154.861,
      8159.206, 8163.406, 8169.391, 8170.246, 8176.62, 8178.095, 8195.508, 8197.196, 8236.636,
      8243.148, 8272.283, 8329.818, 8424.051, 8448.999, 8452.132, 8454.001, 8489.701, 8491.31,
      8493.5, 8503.151, 8523.898, 8537.997, 8545.602, 8547.44, 8559.538, 8566.091, 8566.96,
      8569.136, 8570.168, 8573.003, 8583.959, 8584.036, 8589.611, 8590.839, 8594.394, 8595.899,
      8597.786, 8605.714, 8612.315, 8614.943, 8619.715, 8620.333, 8624.371, 8627.182, 8627.239,
      8631.218, 8632.916, 8633.363, 8636.974, 8641.976, 8642.914, 8643.916, 8647.97, 8649.007,
      8649.139, 8652.576, 8653.692, 8654.59, 8656.573, 8659.902, 8660.872, 8663.098, 8664.693,
      8665.79, 8666.283, 8668.364, 8668.583, 8670.03, 8677.749, 8678.446, 8678.964, 8680.64,
      8683.186, 8686.102, 8686.756, 8692.183, 8694.467, 8701.237, 8703.086, 8704.537, 8709.551,
      8715.968, 8720.277, 8724.1, 8725.607, 8726.089, 8732.572, 8737.181, 8744.225, 8746.73,
      8749.845, 8749.925, 8750.167, 8755.479, 8758.615, 8760.327, 8760.428, 8772.7, 8773.737,
      8781.309, 8789.497, 8790.595, 8799.028, 8804.032, 8814.679, 8828.607, 8828.829, 8853.979,
      8898.338, 8903.193, 8935.264, 8978.258, 9023.267, 9044.647, 9055.518, 9180.788, 9201.787,
      9218.014, 9237.162, 9249.502, 9253.226, 9304.334, 9310.797, 9325.13, 9325.318, 9337.091,
      9342.271, 9351.325, 9354.466, 9373.426, 9431.647, 9472.012, 9476.364, 9477.005, 9483.444,
      9498.026, 9510.313, 9512.941, 9514.481, 9524.546, 9528.338, 9547.922, 9563.854, 9573.038,
      9579.725, 9583.091, 9592.392, 9597.557, 9598.947, 9600.489, 9609.614, 9632.236, 9640.859,
      9649.129, 9651.834, 9656.605, 9659.801, 9664.164, 9672.622, 9679.086, 9688.307, 9691.771,
      9694.654, 9695.819, 9709.285, 9723.16, 9729.139, 9754.315, 9768.566, 9770.393, 9798.732,
      9806.441, 9810.544, 9829.724, 9836.123, 9838.482, 9856.779, 9867.92, 9872.126, 9882.572,
      9900.754, 9936.652, 9939.102, 9945.473, 9951.962, 9954.195, 9969.797, 9974.019, 9979.716,
      9979.87, 9994.255, 10002.781, 10004.766, 10011.701, 10012.657, 10013.503, 10016.662,
      10039.422, 10051.55, 10052.319, 10064.36, 10080.08, 10083.776, 10086.761, 10092.47, 10097.92,
      10104.737, 10107.474, 10111.385, 10111.569, 10140.904, 10143.123, 10143.966, 10148.298,
      10152.596, 10161.035, 10161.469, 10175.391, 10178.44, 10185.334, 10188.119, 10188.298,
      10198.772, 10199.852, 10214.54, 10216.395, 10222.984, 10239.511, 10240.257, 10251.3,
      10253.617, 10278.413, 10286.5, 10306.388, 10318.617, 10319.834, 10371.569, 10376.974,
      10400.274, 10466.586, 10477.552, 10489.819, 10503.693, 10535.511, 10558.625, 10573.08,
      10575.113, 10579.496, 10581.836, 10583.075, 10583.222, 10590.127, 10591.337, 10599.776,
      10604.376, 10628.314, 10629.785, 10632.929, 10645.531, 10655.211, 10682.783, 10702.402,
      10704.4, 10708.64, 10712.903, 10715.897, 10717.198, 10724.592, 10726.673, 10728.326,
      10729.422, 10731.848, 10732.891, 10737.466, 10738.552, 10749.79, 10751.141, 10755.586,
      10756.551, 10773.871, 10773.955, 10781.433, 10786.705, 10789.876, 10790.171, 10792.441,
      10798.742, 10805.483, 10808.832, 10813.393, 10814.123, 10826.089, 10826.28, 10826.792,
      10834.177, 10840.008, 10841.372, 10854.832, 10859.442, 10867.835, 10868.089, 10874.012,
      10880.703, 10881.185, 10888.092, 10892.579, 10892.77, 10919.131, 10925.654, 10932.592,
      10943.941, 10964.231, 10965.656, 10970.128, 10971.598, 10985.868, 10988.551, 10995.469,
      11002.254, 11015.648, 11032.322, 11035.186, 11035.259, 11038.986, 11042.04, 11043.58,
      11044.458, 11049.454, 11049.841, 11052.059, 11066.086, 11086.407, 11099.154, 11103.924,
      11105.034, 11112.773, 11113.23, 11118.556, 11127.532, 11128.86, 11134.847, 11139.455,
      11144.607, 11147.467, 11168.726, 11195.85, 11211.372, 11232.311, 11242.706, 11250.589,
      11258.528, 11266.538, 11386.028, 11395.912, 11778.497, 12304.414,
    ];

    console.info(modes.hsm(xs));    
  });
});

describe('hsmDifferenceTest', () => {
  test('difference in two normal distributions', () => {
    const rng = random.PRNGi32(52);
    const rng0 = random.gaussian(105, 5, rng);
    const rng1 = random.gaussian(100, 5, rng);

    const N = 100;
    const x0 = new Float32Array(N);
    const x1 = new Float32Array(N);

    for (let i = 0; i < N; i++) {
      x0[i] = rng0();
      x1[i] = rng1();
    }

    const [p05, p95] = bootstrap.differenceTest(x0, x1, x => modes.hsm(x).mode, 0.9, 1000);

    expect(p05).toBeInRange(-10, 5);
    expect(p95).toBeInRange(5, 15);
  });

  test('difference in two very similar normal distributions', () => {
    const rng = random.PRNGi32(52);
    const rng0 = random.gaussian(1000, 5, rng);
    const rng1 = random.gaussian(1000, 50, rng);

    const N = 100;
    const x0 = new Float32Array(N);
    const x1 = new Float32Array(N);

    for (let i = 0; i < N; i++) {
      x0[i] = rng0();
      x1[i] = rng1();
    }

    const [p05, p95] = bootstrap.differenceTest(x0, x1, x => modes.hsm(x).mode, 0.9, 1000);

    expect(p05).toBeInRange(-50, 0);
    expect(p95).toBeInRange(0, 50);
  });
});

describe('estimateStdDev', () => {
  test('can estimate standard deviation', () => {
    const rng = random.PRNGi32(52);
    const rng0 = random.gaussian(1000, 5, rng);

    const N = 50_000;
    const x0 = new Float32Array(N);

    for (let i = 0; i < N; i++) {
      x0[i] = rng0();
    }

    expect(modes.estimateStdDev(x0, 1)).toBeCloseTo(5, 1);
    expect(modes.estimateStdDev(x0, 0.5)).toBeCloseTo(5, 1);
    expect(modes.estimateStdDev(x0, 0.25)).toBeCloseTo(5, 0.5);
  });

  test('is robust to noise', () => {
    const rng = random.PRNGi32(52);
    const rng0 = random.gaussian(1000, 5, rng);
    const rng1 = random.gaussian(2000, 50, rng);

    const N = 50_000;
    const xs = new Float32Array(N);

    // 50% noise.
    for (let i = 0; i < N; ) {
      xs[i++] = rng0();
      xs[i++] = rng1();
    }

    // by looking at only the narrowest 5%, the std dev. of the modal value can
    // be estimated
    expect(modes.estimateStdDev(xs, 0.05)).toBeInRange(5, 10);
  });
});
